}, simplify = "array")))), c("0","1"))
# ct.lst <- unique(setdiff(c(sapply(rct.lst, function(r){
#   as.vector(unlist(strsplit(r, split = "->", fixed = T)))
# }, simplify = "array")), c("0", "1")))
ct.lst <- setdiff(as.vector(unlist(c(sapply(rct.lst, function(r){
as.vector(unlist(str_split(string = r, split = "->")))
}, simplify = "array")))), c("0","1"))
# ct.lst <- unique(setdiff(c(sapply(rct.lst, function(r){
#   as.vector(unlist(strsplit(r, split = "->", fixed = T)))
# }, simplify = "array")), c("0", "1")))
ct.lst <- setdiff(as.vector(unlist(c(sapply(rct.lst, function(r){
as.vector(unlist(str_split(r, "->")))
}, simplify = "array")))), c("0","1"))
ct.lst
# ct.lst <- unique(setdiff(c(sapply(rct.lst, function(r){
#   as.vector(unlist(strsplit(r, split = "->", fixed = T)))
# }, simplify = "array")), c("0", "1")))
# ct.lst <- setdiff(as.vector(unlist(c(sapply(rct.lst, function(r){
#   as.vector(unlist(strsplit(r, split = "->", fixed = T)))
# }, simplify = "array")))), c("0","1"))
ct.lst <- setdiff(as.vector(unlist(c(sapply(rct.lst, function(r){
as.vector(unlist(str_split(r, "->")))
}, simplify = "array")))), c("0","1"))
ct.lst
# install.packages("devtools")
library("devtools")
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
getwd()
document()
setwd("..")
install("RestoreNet")
detach("package:RestoreNet", unload=TRUE)
setwd("./RestoreNet")
document()
detach("package:RestoreNet", unload=TRUE)
setwd("..")
install("RestoreNet")
inst.pkgs <- installed.packages()
## required packages:
l.pkgs <- c("RestoreNet",
"xtable",
"scatterpie",
"RColorBrewer",
"scales",
"Matrix",
"stringr")
## check if packages are installed
lapply(l.pkgs, function(pkg){
if(!(pkg %in% rownames(inst.pkgs))){
install.packages(pkg)
}
})
lapply(l.pkgs, function(pkg){library(pkg,character.only=TRUE)})
rm(list = ls())
macaqueID <- "ZH33"
data("Y_RM")
Y <- Y_RM[[macaqueID]]
xtable(apply(Y, c(1,2), sum), digits = 0)
Y <- get.rescaled(Y)
Y <- Y[,,names(which(apply(Y != 0, 3, function(S){sum(S > 0)}) >= 5))]
tps <- as.numeric(rownames(Y))
tps <- (tps - min(tps))/(max(tps) - min(tps))
rownames(Y) <- tps
Y <- Y[which(apply(Y != 0, 1, sum) > 0),,]
Y_NA <- Y
Y_NA[Y_NA == 0] <- NA
Y <- Y[,,1:5]
Y_NA <- Y
Y_NA[Y_NA == 0] <- NA
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0",
"G->0",
"M->0",
"A1->0A",
"M->"))
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0",
"M->"))
paste("A", "", sep = ", ")
paste("A", "", collapse = ", ")
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0",
"A->"))
lapply(LETTERS(4), function(l){paste("'", l, "'", collapse = "")})
lapply(c("A", "B"), function(l){paste("'", l, "'", collapse = "")})
lapply(c("A", "B"), function(l){paste("'", l, "'", sep = "")})
as.vector(unlist(lapply(c("A", "B"), function(l){paste("'", l, "'", sep = "")})))
ct.lst
ct.lst <- c("A", "B")
as.vector(unlist(lapply(ct.lst[which(!(ct.lst %in% colnames(Y)))], function(l){paste("'", l, "'", sep = "")})))
Y
ct.lst <- c("A", "B", "C")
as.vector(unlist(lapply(ct.lst[which(!(ct.lst %in% colnames(Y)))], function(l){paste("'", l, "'", sep = "")})))
cat(paste("Cell types not present in 'Y': ",
paste(as.vector(unlist(lapply(ct.lst[which(!(ct.lst %in% colnames(Y)))], function(l){paste("'", l, "'", sep = "")}))), collapse = ", "),
"\nPlease provide compatible cell types in 'Y' and 'rct.lst'.",
sep = ""))
ct.lst <- c(ct.lst, "")
cat(paste("Cell types not present in 'Y': ",
paste(as.vector(unlist(lapply(ct.lst[which(!(ct.lst %in% colnames(Y)))], function(l){paste("'", l, "'", sep = "")}))), collapse = ", "),
"\nPlease provide compatible cell types in 'Y' and 'rct.lst'.",
sep = ""))
#'   Y[,,cl] <- get.sim.tl(Yt = Y0,
#'                         theta = theta_allcls[,cl],
#'                         S = S,
#'                         s2 = s20,
#'                         tau = tau,
#'                         rct.lst = rcts)
#' }
#' null.res <- fit.null(Y = Y, rct.lst = rcts) ## null model fitting
#' }
##' @export
fit.null <- function(Y,
rct.lst,
maxit = 10000,
factr = 1e7,
pgtol = 1e-8,
lmm = 100,
trace = TRUE){
# pattern <- "[A-Z]+[0-9]*->([A-Z]+[0-9]*|[0-1]+)"
pattern <- "[A-Z0-9]{1,}->[A-Z0-9]{0,}[0-1]{0,}"
if(sum(grepl(pattern,
rct.lst,
ignore.case = FALSE)) < length(rct.lst)){
cat(paste("Unvalid reactions provided in 'rct.lst': ",
paste(rct.lst[which(!grepl(pattern,
c(rct.lst),
ignore.case = FALSE))], collapse = ", "), sep = ""))
return()
}
# ct.lst <- unique(setdiff(c(sapply(rct.lst, function(r){
#   as.vector(unlist(strsplit(r, split = "->", fixed = T)))
# }, simplify = "array")), c("0", "1")))
# ct.lst <- setdiff(as.vector(unlist(c(sapply(rct.lst, function(r){
#   as.vector(unlist(strsplit(r, split = "->", fixed = T)))
# }, simplify = "array")))), c("0","1"))
ct.lst <- setdiff(as.vector(unlist(c(sapply(rct.lst, function(r){
as.vector(unlist(str_split(r, "->")))
}, simplify = "array")))), c("0","1"))
if(sum(!(ct.lst %in% colnames(Y))) > 0){
cat(paste("Cell types not present in 'Y': ",
paste(as.vector(unlist(lapply(ct.lst[which(!(ct.lst %in% colnames(Y)))],
function(l){paste("'", l, "'", sep = "")}))), collapse = ", "),
"\nPlease provide compatible cell types in 'Y' and 'rct.lst'.",
sep = ""))
return()
}
compile.h(rct.lst = rct.lst, envir = environment())
V <- get.V(ct.lst = ct.lst, rct.lst = rct.lst)
Y <- Y[,rownames(V),]
Y_rbind <- Reduce(rbind, lapply(1:dim(Y)[3], function(cl){return(head(Y[,,cl],-1))}))
dT <- rep(rep(diff(as.numeric(rownames(Y))), each = ncol(Y)), times = dim(Y)[3])
if(trace){cat("creating design matrix...")}
M <- get.M(y = Y_rbind, V = V, dT = dT, get.h = get.h)
dx <- unlist(lapply(1:dim(Y)[3], function(cl){return(get.dx(Y[,,cl]))}))
VCNs <- rep(1, length(dx))
clones <- as.vector(unlist(dimnames(Y)[3]))
y <- dx
y_all <- y
M_all <- M
clones_all <- clones <- rep(clones, each = (nrow(Y) - 1)*ncol(Y))
VCNs_all <- VCNs
yfull <- y
Vfull <- V
yM <- cbind(y,M)
yM <- yM[rownames(M) == "T" | names(y) == "T",]
clones <- clones[rownames(M) == "T" | names(y) == "T"]
VCNs <- VCNs[rownames(M) == "T" | names(y) == "T"]
dT <- dT[rownames(M) == "T" | names(y) == "T"]
y <- dx <- yM[,1]
Mfull <- M <- yM[,-1]
rownames(M) <- names(y) <- names(VCNs) <- rownames(yM) <- clones
nrow(M) == length(dx) & length(dx) == length(VCNs) & length(VCNs) == length(dT)
cat(" DONE\n")
nObs <- apply(apply(Y != 0, 3, rowSums) != 0, 2, sum)/max(apply(apply(Y != 0, 3, rowSums) != 0, 2, sum))
if(trace){cat(paste("Fitting null model...\n", sep = ""))}
p <- ncol(V)
epsLB <- 1e-7
resNullFullV <- nullModelFitting(theta_start = rep(1, p + 1),
M = M,
y = y,
V = V,
psiLB = rep(epsLB, p + 1),
psiUB = rep(+Inf, p + 1),
maxit = maxit,
factr = factr,
pgtol = pgtol,
lmm = lmm,
VCNs = VCNs,
nObs = nObs,
trace = trace);
if(trace){cat(" DONE\n")}
return(resNullFullV)
}
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0",
"A->"))
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0",
"->"))
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0",
"->A"))
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0",
"->0"))
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0",
"0->"))
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0",
"A->"))
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0",
"B->"))
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0",
"X->"))
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0",
"x->"))
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0",
"x->y"))
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0",
"Nx->y"))
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0",
"N->y"))
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0",
"B->y"))
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0"))
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0",
"B->y"))
getwd()
# install.packages("devtools")
library("devtools")
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
document()
setwd("..")
install("RestoreNet")
library(RestoreNet)
detach("package:RestoreNet", unload=TRUE)
cat("\nInstall/load packages")
inst.pkgs <- installed.packages()
## required packages:
l.pkgs <- c("RestoreNet",
"xtable",
"scatterpie",
"RColorBrewer",
"scales",
"Matrix",
"stringr")
## check if packages are installed
lapply(l.pkgs, function(pkg){
if(!(pkg %in% rownames(inst.pkgs))){
install.packages(pkg)
}
})
lapply(l.pkgs, function(pkg){library(pkg,character.only=TRUE)})
rm(list = ls())
macaqueID <- "ZH33"
data("Y_RM")
Y <- Y_RM[[macaqueID]]
xtable(apply(Y, c(1,2), sum), digits = 0)
Y <- get.rescaled(Y)
Y <- Y[,,names(which(apply(Y != 0, 3, function(S){sum(S > 0)}) >= 5))]
tps <- as.numeric(rownames(Y))
tps <- (tps - min(tps))/(max(tps) - min(tps))
rownames(Y) <- tps
Y <- Y[which(apply(Y != 0, 1, sum) > 0),,]
Y <- Y[,,1:5]
Y
dim(Y)
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0",
"B->y"))
null.res
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0",
"B->"))
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0",
"->"))
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0",
"->1"))
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0",
"A->M"))
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0",
"M->A"))
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0",
"B->A"))
null.res <- fit.null(Y = Y,
rct.lst = c(
"T->1",
"B->1",
"NK->1",
"G->1",
"M->1",
"T->0",
"B->0",
"NK->0"))
